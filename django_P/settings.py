"""
Django settings for django_P project.

Generated by 'django-admin startproject' using Django 2.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os,sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# BASE_DIR是项目的根目录('/home/pyvip/django_project/django_P')
# os.path.abspath()获取的是绝对路径(完整的描述文件位置的路径)
# 参数(__file__)是指当前的setting配置文件(setting.py)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 创建应用之后，把apps目录加入到sys.path中
sys.path.insert(0, BASE_DIR)
sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Django提供了生成的随机密钥，生产上线时要特殊处理，不可泄露出去，比如：创建一个环境变量来保存SECRET_KEY
# SECRET_KEY用处非常大：session认证机制和其他安全方面的都会用到
SECRET_KEY = '6l%c-tql5m011m-vzh&842u6=2__woo&5k12j-5e6@uu$+&sis'

# SECURITY WARNING: don't run with debug turned on in production!
# 生产上线不要打开debug模式，否则会暴露目录结构和报错信息
DEBUG = True

# 域名或者ip地址(谁能访问这个项目)
ALLOWED_HOSTS = ['*']


# Application definition
# contrib包是Django自带的应用模块
# INSTALLED_APPS列表包括Django自带的应用模块和开发者自定义的应用模块
INSTALLED_APPS = [
    'django.contrib.admin',                  #用于管理站点的应用APP
    'django.contrib.auth',                   #用于验证的应用APP
    'django.contrib.contenttypes',           #用于记录model模型类所有数据的元数据(描述数据的数据)
    'django.contrib.sessions',               #用户会话信息
    'django.contrib.messages',               #消息提示的功能
    'django.contrib.staticfiles',            #用于查找静态文件(css,js等文件)的路径
    'users',
    'news',
    'course',
    'doc',
]

#非常重要的中间件
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',                 #安全中间件：有关安全方面的认证(比如说：对请求头和请求方法做出判断，认证不通过抛出异常)
    'django.contrib.sessions.middleware.SessionMiddleware',          #会话中间件：从客户端发来的请求里获取sessionID,然后去数据库查询是否匹配对应的sessionID
    'django.middleware.common.CommonMiddleware',                     #判断是否是www域名(www.shiguangkey.com)，如果域名没有/的话，Django会自动帮我们加上(www.shiguangkey.com/)
    'django.middleware.csrf.CsrfViewMiddleware',                     #Csrf跨域请求攻击的中间件
    'django.contrib.auth.middleware.AuthenticationMiddleware',       #权限校验认证
    'django.contrib.messages.middleware.MessageMiddleware',          #相当于django.contrib.messages，提供消息提示
    'django.middleware.clickjacking.XFrameOptionsMiddleware',        #也是一个安全防护的中间件
]

#指向全局URL路由表的信息（也就是django_P/urls.py文件）
ROOT_URLCONF = 'django_P.urls'                          #全局路由（主路由表的信息）

# 模板文件的配置信息
TEMPLATES = [
    {
        #后端引擎，这里指向的是DjangoTemplates的模板引擎，作用：把我们创建好的模板，通过视图渲染一个模板，使用DjangoTemplates模板引擎把template转换为HTML页面，然后传给前端，正常显示
        'BACKEND': 'django.template.backends.django.DjangoTemplates',    #后端引擎可以指定，比较流行的后端引擎还有jinjia2
        'DIRS': [os.path.join(BASE_DIR,'templates')],  #模板文件存放的目录路径，这里是全局路径
        'APP_DIRS': True,                              #自定义的应用APP下的templatesm模板文件存放的路径，局部路径，必须是TRUE,否则会找不到子APP模板文件的路径，并且，在全局路径也要添加子APP的模板目录路径
        'OPTIONS': {                                   #额外的templates模板引擎配置信息
            'context_processors': [                    #上下文处理器的配置信息
                'django.template.context_processors.debug',          #模板渲染出现的BUG信息显示出来
                'django.template.context_processors.request',        #request变量提供的信息
                'django.contrib.auth.context_processors.auth',       #提供认证信息，比如Django自带的User模型类(表)的信息
                'django.contrib.messages.context_processors.messages', #消息提示的信息
            ],
        },
    },
]

# WSGI_APPLICATION指定WSGI服务器(Django自带的runserver测试服务器提供的application),也就是wsgi.py文件
# application是runserver测试服务器和Django框架的沟通桥梁
WSGI_APPLICATION = 'django_P.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
'''关系型数据库'''
# DATABASES = {
#     # 'default': {
#     #     'ENGINE': 'django.db.backends.sqlite3',
#     #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     # }
#     # '''方法1：不建议在这配置，容易暴露数据库信息'''
#     # 'default': {
#     #         'ENGINE': 'django.db.backends.mysql',     # 数据库引擎
#     #         'NAME': 'django_P',                       # 数据库名称
#     #         'USER': 'fzq',                            # 数据库登录用户名
#     #         'PASSWORD': 'fzq',                        # 密码
#     #         'HOST': '192.168.216.128',                # 数据库主机IP，如保持默认，则为127.0.0.1
#     #         'PORT': 3306,                             # 数据库端口号，如保持默认，则为3306
#     #     }
#     # '''方法2：上传到码云或者git时不暴露数据库信息，要在忽略文件里面添加指定的文件'''
#     # '''方法3：通过创建环境变量的方式来保存数据库信息'''
#
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'OPTIONS': {
#             'read_default_file': 'utils/db_config/db.cnf',            #read_default_file是Django自带的，不可更改
#         },
#
#     },
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': 'utils/db_config/db.cnf',            #read_default_file是Django自带的，不可更改
        },
    },
}

'''非关系型数据库'''
# 用于存放用户session信息、短信验证码以及图片验证码信息等
# redis相关配置（可以多个redis缓存数据库，只要改数据库名就可以，也可以设置多个其他的非关系型数据库）
CACHES = {
        'default': {
            "BACKEND": "django_redis.cache.RedisCache",        #引擎
            "LOCATION": "redis://127.0.0.1:6379/0",      #redis所在的ip地址/端口/数据库（0-16）
            "OPTIONS": {
                "CLIENT_CLASS": "django_redis.client.DefaultClient",
            }
        },

    }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators
# 认证密码校验器：主要作用于密码校验
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',    #用户属性相似度校验：设置用户名和密码太过于一样，会提示信息
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',             #最小长度的校验器：校验密码的最小和最大的长度，通常密码都会设定长度
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',             #其他校验器
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',            #数字型密码校验器：对数字进行校验，密码是123456，会提示密码太简单的信息
    },
]
# 配置日志器，记录网站的日志信息
LOGGING = {
    # 版本
    'version': 1,
    # 是否禁用已存在的日志器
    'disable_existing_loggers': False,
    'formatters': {
        #复杂格式
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        #简单格式
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    #过滤器：指定哪些日志需要记录，哪些不要记录
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    #处理器：日志是以什么方式存储的
    'handlers': {
        #终端形式，控制台打印，下次重启服务，日志信息不会存在
        'console': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        #文件方式，保存到一个文件里，日志信息不会消失
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
             # 日志文件存放的位置
            'filename': os.path.join(BASE_DIR, "logs/dj_youkou.log"),
            #文件能够存放的最大字节数
            'maxBytes': 300 * 1024 * 1024,
            #文件夹最多能有10个日志文件，10个已满就会覆盖最先的日志文件
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {  # 定义了一个名为django的日志器（名字自定义）
            'handlers': ['console', 'file'],
            #允许backupCount覆盖最先的日志文件
            'propagate': True,
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

# 修改语言
LANGUAGE_CODE = 'zh-hans'
# LANGUAGE_CODE = 'en-us'

# 修改时区
TIME_ZONE = 'Asia/Shanghai'
# TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

# utc 时间
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
#静态文件路径
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),     # 用于存放静态文件的目录
]